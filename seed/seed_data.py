import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app import create_app, db
from app.models import Category, Product, Blog, FAQ
import datetime
from app.models import User

app = create_app()

with app.app_context():
    print("üöÄ B·∫Øt ƒë·∫ßu seed d·ªØ li·ªáu...")

    # Clear any pending transactions and refresh cache
    db.session.rollback()
    db.session.expire_all()

    # ==================== USERS ====================
    try:
        existing_admin = User.query.filter_by(email="admin@example.com").first()
        if not existing_admin:
            admin = User(
                username="admin",
                email="admin@example.com",
                password_hash=User.hash_password("admin123"),
                is_admin=True,
                created_at=datetime.datetime.utcnow()
            )
            db.session.add(admin)
            db.session.commit()
            print("‚úÖ Admin user created")
        else:
            print("‚ö†Ô∏è Admin user ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫°o m·ªõi")
    except Exception as e:
        db.session.rollback()
        print(f"‚ö†Ô∏è L·ªói khi t·∫°o admin user (c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i): {e}")

    # ==================== CATEGORIES ====================
    categories_data = [
        {
            'name': f'C√°t S·∫•y S·ªë {i}',
            'slug': f'cat-say-so-{i}',
            'description': f'C√°t s·∫•y s·ªë {i} ch·∫•t l∆∞·ª£ng cao, d√πng trong c√¥ng nghi·ªáp v√† x√¢y d·ª±ng'
        }
        for i in range(1, 6)
    ]

    for cat_data in categories_data:
        if not Category.query.filter_by(slug=cat_data['slug']).first():
            cat = Category(**cat_data, is_active=True)
            db.session.add(cat)
            print(f"‚úÖ Category: {cat_data['name']}")

    db.session.commit()

    # ==================== PRODUCTS ====================
    sizes = [
        ("Lo·∫°i 1 (0.15mm - 0.3mm)", "0-15-0-3mm", 180000),
        ("Lo·∫°i 2 (0.3mm - 0.6mm)", "0-3-0-6mm", 185000),
        ("Lo·∫°i 3 (0.6mm - 1.2mm)", "0-6-1-2mm", 190000),
    ]

    products_data = []
    for i in range(1, 6):  # 5 lo·∫°i c√°t
        for idx, (name, slug_part, price) in enumerate(sizes, start=1):
            products_data.append({
                'name': f'C√°t S·∫•y S·ªë {i} - {name}',
                'slug': f'cat-say-so-{i}-loai-{idx}-{slug_part}',
                'description': f'C√°t s·∫•y s·ªë {i}, {name}, d√πng cho c√¥ng nghi·ªáp v√† x√¢y d·ª±ng',
                'price': price,
                'old_price': price + 20000,
                'category_id': i,
                'is_featured': (idx == 1)
            })

    for prod_data in products_data:
        if not Product.query.filter_by(slug=prod_data['slug']).first():
            prod = Product(**prod_data, is_active=True)
            db.session.add(prod)
            print(f"‚úÖ Product: {prod_data['name']}")

    db.session.commit()

    # ==================== BLOGS ====================
    blogs_data = [
        {
            'title': '·ª®ng d·ª•ng c√°t s·∫•y trong c√¥ng nghi·ªáp',
            'slug': 'ung-dung-cat-say',
            'excerpt': 'C√°t s·∫•y ƒë∆∞·ª£c ·ª©ng d·ª•ng trong nhi·ªÅu ng√†nh ngh·ªÅ t·ª´ x√¢y d·ª±ng, l·ªçc n∆∞·ªõc ƒë·∫øn s·∫£n xu·∫•t c√¥ng nghi·ªáp.',
            'content': '''<p>C√°t s·∫•y l√† v·∫≠t li·ªáu quan tr·ªçng...</p>''',
            'focus_keyword': 'c√°t s·∫•y',
            'meta_title': '·ª®ng d·ª•ng c√°t s·∫•y trong c√¥ng nghi·ªáp | C√°t S·∫•y',
            'meta_description': 'T√¨m hi·ªÉu ·ª©ng d·ª•ng c√°t s·∫•y trong c√¥ng nghi·ªáp v√† x√¢y d·ª±ng.'
        },
        {
            'title': 'B·∫£ng gi√° c√°t s·∫•y m·ªõi nh·∫•t 2025',
            'slug': 'bang-gia-cat-say-2025',
            'excerpt': 'C·∫≠p nh·∫≠t b·∫£ng gi√° c√°t s·∫•y s·ªë 1 ‚Üí s·ªë 5 m·ªõi nh·∫•t th·ªã tr∆∞·ªùng nƒÉm 2025.',
            'content': '''<p>B·∫£ng gi√° c√°t s·∫•y c·∫≠p nh·∫≠t m·ªõi nh·∫•t...</p>''',
            'focus_keyword': 'gi√° c√°t s·∫•y',
            'meta_title': 'B·∫£ng gi√° c√°t s·∫•y 2025 | Gi√° t·ªët nh·∫•t',
            'meta_description': 'C·∫≠p nh·∫≠t b·∫£ng gi√° c√°t s·∫•y s·ªë 1 ‚Üí s·ªë 5 m·ªõi nh·∫•t 2025.'
        }
    ]

    for blog_data in blogs_data:
        if not Blog.query.filter_by(slug=blog_data['slug']).first():
            blog = Blog(**blog_data, is_active=True)
            blog.calculate_reading_time()
            db.session.add(blog)
            print(f"‚úÖ Blog: {blog_data['title']}")

    db.session.commit()

    # ==================== FAQs ====================
    faqs_data = [
        {'question': 'C√°t s·∫•y l√† g√¨?', 'answer': 'C√°t s·∫•y l√† lo·∫°i c√°t ƒë√£ qua x·ª≠ l√Ω...', 'order': 1},
        {'question': 'C√≥ bao nhi√™u lo·∫°i c√°t s·∫•y?', 'answer': 'Hi·ªán c√≥ 5 lo·∫°i...', 'order': 2},
        {'question': 'C√°t s·∫•y d√πng ƒë·ªÉ l√†m g√¨?', 'answer': 'C√°t s·∫•y th∆∞·ªùng d√πng...', 'order': 3},
        {'question': 'Gi√° c√°t s·∫•y bao nhi√™u?', 'answer': 'Gi√° dao ƒë·ªông 180,000 - 220,000ƒë/m¬≥.', 'order': 4}
    ]

    for faq_data in faqs_data:
        if not FAQ.query.filter_by(question=faq_data['question']).first():
            faq = FAQ(**faq_data, is_active=True)
            db.session.add(faq)
            print(f"‚úÖ FAQ: {faq_data['question']}")

    db.session.commit()

    # ==================== SUMMARY ====================
    print("\nüéâ Seed ho√†n t·∫•t!")
    print(f"üìä Th·ªëng k√™:")
    print(f"  - Categories: {Category.query.count()}")
    print(f"  - Products: {Product.query.count()}")
    print(f"  - Blogs: {Blog.query.count()}")
    print(f"  - FAQs: {FAQ.query.count()}")